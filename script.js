// H√†m g·ªçi API ƒë·ªÉ l·∫•y danh s√°ch s√°ch
const fetchBooksFromAPI = async (searchQuery = '') => {
    try {
        const trimmedQuery = searchQuery.trim();
        const url = trimmedQuery 
            ? `http://localhost:3000/api/books/search?q=${encodeURIComponent(trimmedQuery)}` 
            : 'http://localhost:3000/api/books';
        
        console.log('üåê Calling URL:', url);
        
        const response = await fetch(url);
        console.log('üì° Response status:', response.status);
        
        if (!response.ok) {
            throw new Error(`L·ªói HTTP! Status: ${response.status}`);
        }
        const books = await response.json();
        console.log(`üìö ƒê√£ t·∫£i ${books.length} cu·ªën s√°ch`, books);
        return books;
    } catch (error) {
        console.error('‚ùå Kh√¥ng th·ªÉ l·∫•y s√°ch t·ª´ API:', error);
        return [];
    }
};

// H√ÄM M·ªöI: T√¨m ki·∫øm g·∫ßn ƒë√∫ng ·ªü frontend
const fuzzySearchBooks = (books, searchQuery) => {
    if (!searchQuery || searchQuery.trim() === '') {
        return books;
    }
    
    const query = searchQuery.toLowerCase().trim();
    
    return books.filter(book => {
        const title = (book.Title || '').toLowerCase();
        const author = (book.Author || '').toLowerCase();
        const category = (book.category_name || '').toLowerCase();
        
        // T√¨m ki·∫øm g·∫ßn ƒë√∫ng: ch·ªâ c·∫ßn ch·ª©a t·ª´ kh√≥a
        return title.includes(query) || 
               author.includes(query) || 
               category.includes(query);
    });
};

// H√†m g·ªçi API ƒë·ªÉ l·∫•y danh s√°ch th·ªÉ lo·∫°i
const fetchCategoriesFromAPI = async () => {
    try {
        const response = await fetch('http://localhost:3000/api/categories');
        if (!response.ok) {
            throw new Error(`L·ªói HTTP! Status: ${response.status}`);
        }
        const categories = await response.json();
        return categories;
    } catch (error) {
        console.error('Kh√¥ng th·ªÉ l·∫•y th·ªÉ lo·∫°i t·ª´ API:', error);
        return [];
    }
};

// H√†m hi·ªÉn th·ªã s√°ch ra HTML
const populateBooksSection = (books, searchQuery = '') => {
    const booksContainer = document.getElementById('books-container');
    
    if (!booksContainer) {
        console.error('‚ùå Kh√¥ng t√¨m th·∫•y element #books-container');
        return;
    }
    
    booksContainer.innerHTML = '';

    if (!books || books.length === 0) {
        const noResultMsg = searchQuery 
            ? `<div class="no-results">
                <p style="font-size: 48px; margin-bottom: 10px;">üòî</p>
                <p style="font-size: 20px; color: #8B4513; font-weight: 600;">Kh√¥ng t√¨m th·∫•y s√°ch v·ªõi t·ª´ kh√≥a "<strong>${searchQuery}</strong>"</p>
                <p style="color: #666;">H√£y th·ª≠ t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a kh√°c!</p>
               </div>`
            : '<div class="no-results"><p>Kh√¥ng c√≥ s√°ch n√†o trong th∆∞ vi·ªán.</p></div>';
        booksContainer.innerHTML = noResultMsg;
        return;
    }

    const fragment = document.createDocumentFragment();
    books.forEach(book => {
        const bookCard = document.createElement('div');
        bookCard.className = 'book';

        // Highlight t·ª´ kh√≥a t√¨m ki·∫øm trong ti√™u ƒë·ªÅ
        let displayTitle = book.Title;
        if (searchQuery) {
            const regex = new RegExp(`(${searchQuery.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
            displayTitle = book.Title.replace(regex, '<mark>$1</mark>');
        }

        bookCard.innerHTML = `
            <div class="book-image-container">
                <img src="${book.ImageUrl || 'images/default-book.png'}" 
                     alt="${book.Title}" 
                     loading="lazy" 
                     onerror="this.onerror=null;this.src='images/default-book.png';">
            </div>
            <div class="book-content">
                <h3>${displayTitle}</h3>
                <div class="book-meta">
                    <p><strong>T√°c gi·∫£:</strong> ${book.Author}</p>
                    <p><strong>Th·ªÉ lo·∫°i:</strong> ${book.category_name || 'Ch∆∞a x√°c ƒë·ªãnh'}</p>
                    ${book.Rating ? `<p><strong>ƒê√°nh gi√°:</strong> ${book.Rating}/5 ‚≠ê</p>` : ''}
                </div>
                <a href="details.html?id=${book.BookID}" class="read-btn">Xem chi ti·∫øt</a>
            </div>
        `;
        fragment.appendChild(bookCard);
    });
    booksContainer.appendChild(fragment);
};

// H√†m hi·ªÉn th·ªã th·ªÉ lo·∫°i ra menu dropdown
const populateCategoryDropdown = (categories) => {
    const dropdown = document.getElementById('category-dropdown');
    if (!dropdown) {
        console.warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y #category-dropdown');
        return;
    }
    
    console.log('üìÇ Categories received:', categories);
    
    dropdown.innerHTML = '';
    
    if (!categories || categories.length === 0) {
        console.warn('‚ö†Ô∏è Kh√¥ng c√≥ categories');
        return;
    }
    
    categories.forEach(category => {
        if (!category || !category.Name) {
            console.warn('‚ö†Ô∏è Category thi·∫øu name:', category);
            return;
        }
        
        const li = document.createElement('li');
        const a = document.createElement('a');
        a.href = `#`;
        
        const categoryName = String(category.Name);
        a.textContent = categoryName.charAt(0).toUpperCase() + categoryName.slice(1);
        
        a.addEventListener('click', async (e) => {
            e.preventDefault();
            console.log(`üìÇ L·ªçc theo th·ªÉ lo·∫°i: ${categoryName}`);
            const books = await fetch(`http://localhost:3000/api/books/category/${category.CategoryID}`)
                .then(res => res.json())
                .catch((err) => {
                    console.error('‚ùå L·ªói khi l·ªçc category:', err);
                    return [];
                });
            populateBooksSection(books);
        });
        
        li.appendChild(a);
        dropdown.appendChild(li);
    });
};

// Bi·∫øn to√†n c·ª•c ƒë·ªÉ cache t·∫•t c·∫£ s√°ch
let allBooksCache = [];

// Ch·∫°y c√°c h√†m n√†y khi trang ƒë∆∞·ª£c t·∫£i xong
document.addEventListener('DOMContentLoaded', async () => {
    console.log('‚úÖ DOMContentLoaded fired');
    console.log('üìç Script version: 2.0 - Fuzzy Search Enabled');
    
    // L·∫•y v√† cache t·∫•t c·∫£ s√°ch
    allBooksCache = await fetchBooksFromAPI();
    console.log('üì¶ Books cached:', allBooksCache.length);
    populateBooksSection(allBooksCache);

    // L·∫•y v√† hi·ªÉn th·ªã th·ªÉ lo·∫°i
    const categories = await fetchCategoriesFromAPI();
    populateCategoryDropdown(categories);

    // X·ª≠ l√Ω t√¨m ki·∫øm
    const searchInput = document.getElementById('search-input');
    const searchButton = document.getElementById('search-button');
    
    if (!searchInput) {
        console.error('‚ùå Kh√¥ng t√¨m th·∫•y element #search-input');
        return;
    }
    
    if (!searchButton) {
        console.error('‚ùå Kh√¥ng t√¨m th·∫•y element #search-button');
        return;
    }
    
    let currentQuery = '';

    const performSearch = () => {
        const query = searchInput.value.trim();
        console.log('üîç T√¨m ki·∫øm g·∫ßn ƒë√∫ng:', query);
        
        if (query === currentQuery) {
            console.log('‚è≠Ô∏è Query kh√¥ng thay ƒë·ªïi, skip');
            return;
        }
        
        currentQuery = query;
        
        // T√¨m ki·∫øm g·∫ßn ƒë√∫ng tr√™n cache
        const filteredBooks = fuzzySearchBooks(allBooksCache, query);
        console.log(`‚úÖ T√¨m th·∫•y ${filteredBooks.length} k·∫øt qu·∫£`);
        
        populateBooksSection(filteredBooks, query);
    };

    // 1. T√¨m ki·∫øm khi click n√∫t
    searchButton.addEventListener('click', (e) => {
        console.log('üñ±Ô∏è Search button clicked!');
        e.preventDefault();
        e.stopPropagation();
        performSearch();
    });

    // 2. T√¨m ki·∫øm khi nh·∫•n Enter
    searchInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
            console.log('‚å®Ô∏è Enter pressed!');
            e.preventDefault();
            performSearch();
        }
        // X√≥a khi nh·∫•n ESC
        if (e.key === 'Escape') {
            searchInput.value = '';
            currentQuery = '';
            populateBooksSection(allBooksCache);
        }
    });

    // 3. T·∫£i l·∫°i s√°ch khi x√≥a h·∫øt text
    searchInput.addEventListener('input', () => {
        if (searchInput.value.trim() === '' && currentQuery !== '') {
            console.log('üóëÔ∏è Input cleared, showing all books');
            currentQuery = '';
            populateBooksSection(allBooksCache);
        }
    });
    
    console.log('‚úÖ Event listeners attached successfully');
});